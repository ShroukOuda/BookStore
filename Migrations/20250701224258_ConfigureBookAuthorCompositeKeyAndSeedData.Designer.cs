// <auto-generated />
using System;
using BookStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250701224258_ConfigureBookAuthorCompositeKeyAndSeedData")]
    partial class ConfigureBookAuthorCompositeKeyAndSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Software engineer and author, also known as Uncle Bob. Known for advocating software design principles and clean code practices.",
                            BirthDate = new DateTime(1952, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Robert",
                            LastName = "Martin",
                            Nationality = "American",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Web designer and developer who has spent over a decade helping people learn about web design and programming.",
                            BirthDate = new DateTime(1970, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jon",
                            LastName = "Duckett",
                            Nationality = "British",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Biography = "JavaScript developer and trainer, known for the You Don't Know JS book series and open source contributions.",
                            BirthDate = new DateTime(1980, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kyle",
                            LastName = "Simpson",
                            Nationality = "American",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Software engineer and author, former Google, Microsoft, and Apple employee. Founder of CareerCup.",
                            BirthDate = new DateTime(1982, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Gayle",
                            LastName = "McDowell",
                            Nationality = "American",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Software developer and author, co-author of The Pragmatic Programmer and founding member of the Agile Alliance.",
                            BirthDate = new DateTime(1964, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Andrew",
                            LastName = "Hunt",
                            Nationality = "American",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Biography = "Software developer and author, co-author of The Pragmatic Programmer and advocate for pragmatic software development.",
                            BirthDate = new DateTime(1956, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "David",
                            LastName = "Thomas",
                            Nationality = "British",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Biography = "Computer scientist, author, and former CTO of Disney Online, known for Head First book series.",
                            BirthDate = new DateTime(1965, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eric",
                            LastName = "Freeman",
                            Nationality = "American",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Biography = "Software developer and co-author of several Head First books, specializing in web development and programming education.",
                            BirthDate = new DateTime(1970, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Elisabeth",
                            LastName = "Robson",
                            Nationality = "American",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Biography = "British software developer, author and international speaker on software development, known for refactoring and enterprise software design.",
                            BirthDate = new DateTime(1963, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Martin",
                            LastName = "Fowler",
                            Nationality = "British",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Biography = "Multi-award winning CTO, researcher and author, known for The Phoenix Project and The DevOps Handbook.",
                            BirthDate = new DateTime(1967, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Gene",
                            LastName = "Kim",
                            Nationality = "American",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookStore.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A handbook for writing clean, readable, and maintainable code with practical examples and best practices.",
                            ISBN = "9780132350884",
                            ImageUrl = "/images/books/clean-code.jpg",
                            Language = "English",
                            Pages = 464,
                            Price = 45.99m,
                            PublishedDate = new DateTime(2008, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 50,
                            Title = "Clean Code: A Handbook of Agile Software Craftsmanship",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A full-color introduction to the basics of HTML and CSS for creating modern, professional websites.",
                            ISBN = "9781118008188",
                            ImageUrl = "/images/books/html-css.jpg",
                            Language = "English",
                            Pages = 490,
                            Price = 35.99m,
                            PublishedDate = new DateTime(2011, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 35,
                            Title = "HTML and CSS: Design and Build Websites",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deep dive into JavaScript's scope and closures, essential concepts for mastering JavaScript.",
                            ISBN = "9781449335588",
                            ImageUrl = "/images/books/ydkjs-scope.jpg",
                            Language = "English",
                            Pages = 98,
                            Price = 29.99m,
                            PublishedDate = new DateTime(2014, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 42,
                            Title = "You Don't Know JS: Scope & Closures",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "189 programming questions and solutions to help you prepare for technical interviews at top tech companies.",
                            ISBN = "9780984782857",
                            ImageUrl = "/images/books/cracking-coding.jpg",
                            Language = "English",
                            Pages = 696,
                            Price = 39.99m,
                            PublishedDate = new DateTime(2015, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 28,
                            Title = "Cracking the Coding Interview",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Your journey to mastery - 20th Anniversary Edition with updated content for modern development practices.",
                            ISBN = "9780135957059",
                            ImageUrl = "/images/books/pragmatic-programmer.jpg",
                            Language = "English",
                            Pages = 352,
                            Price = 49.99m,
                            PublishedDate = new DateTime(2019, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 31,
                            Title = "The Pragmatic Programmer",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A brain-friendly guide to design patterns that every developer should know, with real-world examples.",
                            ISBN = "9781492078005",
                            ImageUrl = "/images/books/head-first-patterns.jpg",
                            Language = "English",
                            Pages = 672,
                            Price = 54.99m,
                            PublishedDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 25,
                            Title = "Head First Design Patterns",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unearthing the excellence in JavaScript - a guide to the language's best features and how to use them effectively.",
                            ISBN = "9780596517748",
                            ImageUrl = "/images/books/js-good-parts.jpg",
                            Language = "English",
                            Pages = 176,
                            Price = 34.99m,
                            PublishedDate = new DateTime(2008, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 45,
                            Title = "JavaScript: The Good Parts",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Learn to build cross-platform mobile apps using React Native, from basic concepts to advanced techniques.",
                            ISBN = "9781617294051",
                            ImageUrl = "/images/books/react-native.jpg",
                            Language = "English",
                            Pages = 312,
                            Price = 44.99m,
                            PublishedDate = new DateTime(2018, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 22,
                            Title = "React Native in Action",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Master SQL fundamentals with this comprehensive guide covering queries, data manipulation, and database design.",
                            ISBN = "9781492057611",
                            ImageUrl = "/images/books/learning-sql.jpg",
                            Language = "English",
                            Pages = 370,
                            Price = 39.99m,
                            PublishedDate = new DateTime(2020, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 33,
                            Title = "Learning SQL",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A novel about IT, DevOps, and helping your business win - learn DevOps principles through an engaging story.",
                            ISBN = "9781942788294",
                            ImageUrl = "/images/books/phoenix-project.jpg",
                            Language = "English",
                            Pages = 432,
                            Price = 42.99m,
                            PublishedDate = new DateTime(2018, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 27,
                            Title = "The Phoenix Project",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Learn how to improve code quality through systematic refactoring techniques and best practices.",
                            ISBN = "9780134757599",
                            ImageUrl = "/images/books/refactoring.jpg",
                            Language = "English",
                            Pages = 448,
                            Price = 54.99m,
                            PublishedDate = new DateTime(2018, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 18,
                            Title = "Refactoring: Improving the Design of Existing Code",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complete guide to iOS app development using Swift, covering UI design, data management, and app store deployment.",
                            ISBN = "9781617295071",
                            ImageUrl = "/images/books/ios-swift.jpg",
                            Language = "English",
                            Pages = 520,
                            Price = 49.99m,
                            PublishedDate = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StockQuantity = 20,
                            Title = "iOS Development with Swift",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookStore.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 6
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 7
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 8
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 10
                        },
                        new
                        {
                            BookId = 11,
                            AuthorId = 9
                        },
                        new
                        {
                            BookId = 12,
                            AuthorId = 7
                        });
                });

            modelBuilder.Entity("BookStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about programming languages, software development, and coding practices",
                            Name = "Programming",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books focused on web technologies, frameworks, and web application development",
                            Name = "Web Development",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about developing applications for mobile devices and platforms",
                            Name = "Mobile Development",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books covering database design, administration, and data management",
                            Name = "Database",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about deployment, infrastructure, cloud computing, and DevOps practices",
                            Name = "DevOps & Cloud",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about software architecture, design patterns, and engineering practices",
                            Name = "Software Engineering",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookStore.Models.Book", b =>
                {
                    b.HasOne("BookStore.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookStore.Models.BookAuthor", b =>
                {
                    b.HasOne("BookStore.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookStore.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookStore.Models.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
